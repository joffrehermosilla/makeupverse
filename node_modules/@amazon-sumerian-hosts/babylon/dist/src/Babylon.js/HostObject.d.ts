export default HostObject;
/**
 * @extends core/HostObject
 * @alias babylonjs/HostObject
 */
declare class HostObject {
    /**
     *
     * @param {AWS.Polly=} polly An AWS Polly service client, assumed to have the proper
     *     credentials and configuration.
     * @param {AWS.Polly.presigner=} presigner The presigner used for Polly calls
     */
    static initTextToSpeech(polly?: AWS.Polly, presigner?: AWS.Polly.presigner): Promise<void>;
    /**
     * @typedef {Object} SumerianLoadedAnimations
     * @property {AnimationGroup[]} idleClips
     * @property {AnimationGroup[]} lipSyncClips
     * @property {AnimationGroup[]} gestureClips
     * @property {AnimationGroup[]} emoteClips
     * @property {AnimationGroup[]} faceClips
     * @property {AnimationGroup[]} blinkClips
     * @property {AnimationGroup[]} poiClips
     */
    /**
     * @typedef {Object} SumerianHostLoadedAssets
     * @property {Mesh} characterMesh - The loaded character mesh
     * @property {SumerianLoadedAnimations} animClips - The loaded animations
     * @property {AnimationGroup} bindPoseOffset
     * @property {Object} gestureConfig - see "3d-assets/animations/adult_female/gesture.json" for reference
     * @property {Object} poiConfig - see "3d-assets/animations/adult_female/poi.json" for reference
     */
    /**
     * @typedef {Object} SumerianAnimationsConfig
     * @property {string} animStandIdleUrl
     * @property {string} animLipSyncUrl
     * @property {string} animGestureUrl
     * @property {string} animEmoteUrl
     * @property {string} animFaceIdleUrl
     * @property {string} animBlinkUrl
     * @property {string} animPointOfInterestUrl
     */
    /**
     * @typedef {Object} SumerianCharacterConfig
     * @property {string} modelUrl - The path to the .gltf file
     * @property {string} gestureConfigUrl
     * @property {string} pointOfInterestConfigUrl
     * @property {SumerianAnimationsConfig} animUrls
     */
    /**
     * @typedef {Object} SumerianPollyConfig
     * @property {AWS.Polly=} pollyClient - The reference to the Polly service client to use.
     * @property {AWS.Polly.presigner=} pollyPresigner - The reference to the Polly presigner to use.
     * @property {string} pollyVoice - The Polly voice to use. See
     *   {@link https://docs.aws.amazon.com/polly/latest/dg/voicelist.html}
     * @property {string} pollyEngine - The Polly engine you would like to
     *   use. Either "standard" or "neural". Note that the neural engine incurs a
     *   higher cost and is not compatible with all voices or regions. See
     *   {@link https://docs.aws.amazon.com/polly/latest/dg/NTTS-main.html}
     */
    /**
     * @typedef {Object} SumerianLoadedAnimation
     * @property {string} clipGroupId
     * @property {AnimationGroup[]} clips
     */
    /**
     * Loads the assets that comprise a host character.
     *
     * @private
     *
     * @param {Scene} scene
     * @param {SumerianCharacterConfig} characterConfig
     * @return {SumerianHostLoadedAssets}
     */
    private static loadAssets;
    /**
     * Loads the gltf file that comprises a character model,
     * and adds it to the scene to be rendered.
     *
     * @param {Scene} scene
     * @param {string} modelUrl The absolute path to the gltf file that contains the model
     * @return {AssetContainer} A BabylonJS asset container that contains the loaded meshes
     */
    static loadCharacterMesh(scene: Scene, modelUrl: string): AssetContainer;
    /**
     * Loads the animations for a host character
     *
     * @param {Scene} scene
     * @param {Mesh} characterMesh The root mesh of the character model
     * @param {AnimationGroup} bindPoseOffset
     * @param {SumerianAnimationsConfig} animClipUrls
     * @return {SumerianLoadedAnimations}
     */
    static loadCharacterAnimations(scene: Scene, characterMesh: Mesh, bindPoseOffset: AnimationGroup, { animStandIdleUrl, animLipSyncUrl, animGestureUrl, animEmoteUrl, animFaceIdleUrl, animBlinkUrl, animPointOfInterestUrl, }: {
        animStandIdleUrl: string;
        animLipSyncUrl: string;
        animGestureUrl: string;
        animEmoteUrl: string;
        animFaceIdleUrl: string;
        animBlinkUrl: string;
        animPointOfInterestUrl: string;
    }): {
        idleClips: AnimationGroup[];
        lipSyncClips: AnimationGroup[];
        gestureClips: AnimationGroup[];
        emoteClips: AnimationGroup[];
        faceClips: AnimationGroup[];
        blinkClips: AnimationGroup[];
        poiClips: AnimationGroup[];
    };
    /**
     * Loads animations into the provided scene.
     *
     * @param {Scene} scene
     * @param {Mesh[]} childMeshes
     * @param {string} url
     *   URL of a 3D file containing animations (.gltf or .glb)
     * @param {string} clipGroupId
     *   An ID of your choosing for labeling the group.
     * @returns {Promise<SumerianLoadedAnimation>}
     */
    static loadAnimation(scene: Scene, childMeshes: Mesh[], url: string, clipGroupId: string): Promise<{
        clipGroupId: string;
        clips: AnimationGroup[];
    }>;
    /**
     * Set up animations on a host - gestures, lipsync, etc - and start rendering them in the scene
     * @param {SumerianHostLoadedAssets} assets
     * @param {Scene} scene
     */
    static assembleHost(assets: {
        /**
         * - The loaded character mesh
         */
        characterMesh: Mesh;
        /**
         * - The loaded animations
         */
        animClips: {
            idleClips: AnimationGroup[];
            lipSyncClips: AnimationGroup[];
            gestureClips: AnimationGroup[];
            emoteClips: AnimationGroup[];
            faceClips: AnimationGroup[];
            blinkClips: AnimationGroup[];
            poiClips: AnimationGroup[];
        };
        bindPoseOffset: AnimationGroup;
        /**
         * - see "3d-assets/animations/adult_female/gesture.json" for reference
         */
        gestureConfig: any;
        /**
         * - see "3d-assets/animations/adult_female/poi.json" for reference
         */
        poiConfig: any;
    }, scene: Scene): HostObject;
    /**
     *
     * @param {HostObject} host
     * @param {Scene} scene
     * @param {string} voice
     * @param {string} engine
     * @param {string} language Default: 'en-US'
     * @param {string} audioJointName The identifier of the joint to attach the audio to. Default: 'char:def_c_neckB'
     */
    static addTextToSpeech(host: HostObject, scene: Scene, voice: string, engine: string, language?: string, audioJointName?: string): void;
    /**
     * Enable point of interest tracking on the host
     * @param {HostObject} host
     * @param {Scene} scene
     * @param {Object} poiConfig
     * @param {string} lookJointName Default: 'char:jx_c_look'
     */
    static addPointOfInterestTracking(host: HostObject, scene: Scene, poiConfig: any, lookJointName?: string): void;
    /**
     * Reads JSON file
     * @param {string} url
     * @returns JSON from file
     */
    static loadJson(url: string): Promise<any>;
    /**
     * Returns a config object describing the assets that comprise one of the
     * eight built-in Sumerian Host characters.
     *
     * Available character IDs are:
     * - "Cristine"
     * - "Fiona"
     * - "Grace"
     * - "Maya"
     * - "Jay"
     * - "Luke"
     * - "Preston"
     * - "Wes"
     * @param {string} assetsPath A relative path from the HTML page to the directory containing the
     * "characters" and "animations" folders for the built-in host characters.
     * @param {string} characterId The ID of the character to be used.
     * @returns {SumerianCharacterConfig}
     */
    static getCharacterConfig(assetsPath: string, characterId: string): {
        /**
         * - The path to the .gltf file
         */
        modelUrl: string;
        gestureConfigUrl: string;
        pointOfInterestConfigUrl: string;
        animUrls: {
            animStandIdleUrl: string;
            animLipSyncUrl: string;
            animGestureUrl: string;
            animEmoteUrl: string;
            animFaceIdleUrl: string;
            animBlinkUrl: string;
            animPointOfInterestUrl: string;
        };
    };
    /**
     * Creates a new Sumerian Host from the assets listed in the `characterConfig`
     * parameter. This can be used to create one of the built-in hosts or your own
     * custom host.
     *
     * When creating a custom host, use `HOST.HostObject.getCharacterConfig()` to
     * retrieve the appropriate config for that character. (See example below.)
     *
     * **Example**:
  ```
  const characterId = 'Cristine';
  const characterConfig = HOST.HostUtils.getCharacterConfig('./assets/character-assets', characterId);
  const pollyConfig = { pollyVoice: 'Joanna', pollyEngine: 'neural' };
  const host = await HOST.HostUtils.createHost(scene, characterConfig, pollyConfig);
  ```
     *
     * @param {Scene} scene The scene to add the host to.
     * @param {SumerianCharacterConfig} characterConfig
     * @param {SumerianPollyConfig} pollyConfig
     * @param {string} lookJoint The name of the joint to use for point-of-interest
     * tracking. Defaults to 'char:jx_c_look' which is the appropriate value for
     * the built-in host characters. Custom characters may need to specify a
     * different joint name.
     *
     * @returns {HostObject} A functioning Sumerian Host
     */
    static createHost(scene: Scene, characterConfig: {
        /**
         * - The path to the .gltf file
         */
        modelUrl: string;
        gestureConfigUrl: string;
        pointOfInterestConfigUrl: string;
        animUrls: {
            animStandIdleUrl: string;
            animLipSyncUrl: string;
            animGestureUrl: string;
            animEmoteUrl: string;
            animFaceIdleUrl: string;
            animBlinkUrl: string;
            animPointOfInterestUrl: string;
        };
    }, pollyConfig: {
        /**
         * - The reference to the Polly service client to use.
         */
        pollyClient?: AWS.Polly;
        /**
         * - The reference to the Polly presigner to use.
         */
        pollyPresigner?: AWS.Polly.presigner;
        /**
         * - The Polly voice to use. See
         * {@link https://docs.aws.amazon.com/polly/latest/dg/voicelist.html}
         */
        pollyVoice: string;
        /**
         * - The Polly engine you would like to
         * use. Either "standard" or "neural". Note that the neural engine incurs a
         * higher cost and is not compatible with all voices or regions. See
         * {@link https://docs.aws.amazon.com/polly/latest/dg/NTTS-main.html}
         */
        pollyEngine: string;
    }): HostObject;
    /**
     *
     * @returns {string[]} An array of characterId's that can be used with getCharacterConfig
     */
    static getAvailableCharacters(): string[];
    /**
     * @constructor
     *
     * @param {Object=} options - Options for the host.
     * @param {Object=} options.owner - Optional engine-specific owner of the host.
     */
    constructor(options?: any | undefined);
    _events: {};
    get now(): any;
    _createListener(callback: any): (value: any) => void;
    _addListener(message: any, listener: any): void;
    _removeListener(message: any, listener: any): void;
    listenTo(message: any, callback: any): void;
    stopListening(message: any, callback: any): void;
    emit(message: any, value: any): void;
}
//# sourceMappingURL=HostObject.d.ts.map